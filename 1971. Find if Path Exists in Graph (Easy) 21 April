Code:

class Solution {
public:
    unordered_map<int, list<int>> adjList;

    void addEdge(int u, int v){
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }

    void bfs(int src, unordered_map<int, bool>& visited){
        queue<int> q;
        q.push(src);
        visited[src] = true;

        while(!q.empty()){
            int frontNode = q.front();
            q.pop();

            for(auto neighbour : adjList[frontNode]){
                if(!visited[neighbour]){
                    q.push(neighbour);
                    visited[neighbour] = true;
                }
            }
        }
    }

    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        for(auto edge : edges){
            addEdge(edge[0], edge[1]);
        }

        unordered_map<int, bool> visited;
        bfs(source, visited);

        return visited[destination];
    }
};
